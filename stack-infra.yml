AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::SecretsManager-2020-07-23
  - AWS::Serverless-2016-10-31
Description: >-
  Aurora Postgres Database KMS Key and Secrets

Parameters:
  orgUnit:
    Type: String
    Default: demo
  envType:
    Type: String
    Default: dev
  appCode:
    Type: String
    Default: rds-infra

Conditions:
  IsEast: !Equals [!Ref "AWS::Region", "us-east-1"]

Resources:
  ##KMS Key for RDS Encryption
  RdsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      Description: !Sub ${orgUnit}-kms-${envType}-${appCode}
      KeyPolicy:
        Version: "2012-10-17"
        Statement:          
          - Sid: Allow access for PG ECS IAMs
            Effect: Allow
            Principal:
              AWS:
                "*"
            # Condition:
            #   StringLike: 
            #     'aws:PrincipalArn': !Sub arn:aws:iam::${AWS::AccountId}:role/adf-auth-database-${envType}-Pwd-SecretsManager*
            Action:
              - kms:CancelKeyDeletion
              - kms:Create*
              - kms:CreateGrant
              - kms:Delete*
              - kms:Describe*
              - kms:Disable*
              - kms:Enable*
              - kms:Encrypt
              - kms:Get*
              - kms:List*
              - kms:ListGrants
              - kms:Put*
              - kms:ReEncrypt*
              - kms:Revoke*
              - kms:RevokeGrant
              - kms:ScheduleKeyDeletion
              - kms:TagResource
              - kms:UntagResource
              - kms:Update*
              - kms:ListAliases
              - kms:RequestAlias
              - kms:ResourceAliases
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:GetKeyPolicy
            Resource: "*"  

  RdsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${orgUnit}-${appCode}-kms-key
      TargetKeyId: !Ref RdsKmsKey

  RootUserSecret:
    Type: AWS::SecretsManager::Secret
    Condition: IsEast
    Properties:
      Name: /demo/secret/rds/pgadmin
      Description: Aurora PostgreSQL Master User (pgadmin) Secret
      KmsKeyId: !Ref RdsKmsKey
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "pgadmin"}'
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\'
        PasswordLength: 16
      ReplicaRegions:
        - Region: us-west-2

  LambdaUserSecret:
    Type: AWS::SecretsManager::Secret
    Condition: IsEast
    Properties:
      Name: /demo/secret/rds/lambdauser
      Description: Application user lambdauser Secret
      KmsKeyId: !Ref RdsKmsKey
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "lambdauser"}'
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\'
        PasswordLength: 16
      ReplicaRegions:
        - Region: us-west-2


  RdsGlobalClusterSeqNumber:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /demo/rds/global/cluster/seqnumber
      Type: String
      Value: 1
      Description: The RDS Global Cluster Seq Number

  RdsKmsKeyArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /demo/rds/kmskey/arn
      Type: String
      Value: !GetAtt RdsKmsKey.Arn
      Description: The RDS KMS Key for Secret/Db encryption

  RootUserSecretArn:
    Type: AWS::SSM::Parameter
    Condition: IsEast
    Properties:
      Name: /demo/rds/pgadmin/secret
      Type: String
      Value: !Ref RootUserSecret
      Description: The Master User Secret

  LambdaUserSecretArn:
    Type: AWS::SSM::Parameter
    Condition: IsEast
    Properties:
      Name: /demo/rds/lambdauser/secret
      Type: String
      Value: !Ref LambdaUserSecret
      Description: The lambdauser Secret

  LambdaSecurityGroupHttps:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "need open to world for various reasons"
          - id: W28
            reason: "Explicit name is required allow manual monitoring of event firing"
          - id: W36
            reason: "Group Rule Descriptions are defined in GroupDescription"
          - id: W42
            reason: "not a valid warning according to Oleg"
    Properties:
      GroupDescription: Common Security group for all the Lambda Functions
      GroupName: !Sub ${orgUnit}-security-group-${envType}-${appCode}-lambda-https
      VpcId: !ImportValue inf-vpc
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 127.0.0.1/32
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0


  LambdaSecurityGroupHttpsID:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /demo/sg/lambda-security-group-https
      Type: String
      Value: !Ref LambdaSecurityGroupHttps
      Description: A common Security group for all Lambda functions

